$date
	Thu Sep 25 14:05:09 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module test $end
$var reg 1 ! clk $end
$scope module Comp $end
$var wire 1 ! clk $end
$var wire 8 " one [7:0] $end
$var wire 1 # reset $end
$var wire 8 $ zero [7:0] $end
$var wire 4 % status_flags [3:0] $end
$var wire 8 & regB_out [7:0] $end
$var wire 8 ' regA_out [7:0] $end
$var wire 8 ( pc_addr [7:0] $end
$var wire 7 ) opcode [6:0] $end
$var wire 8 * muxData_out [7:0] $end
$var wire 8 + muxB_out [7:0] $end
$var wire 8 , muxA_out [7:0] $end
$var wire 8 - literal [7:0] $end
$var wire 15 . instruction [14:0] $end
$var wire 8 / data_mem_out [7:0] $end
$var wire 2 0 ctrl_S_D [1:0] $end
$var wire 2 1 ctrl_S_B [1:0] $end
$var wire 2 2 ctrl_S_A [1:0] $end
$var wire 1 3 ctrl_L_PC $end
$var wire 1 4 ctrl_L_B $end
$var wire 1 5 ctrl_L_A $end
$var wire 1 6 ctrl_D_W $end
$var wire 4 7 ctrl_ALU_Sel [3:0] $end
$var wire 8 8 alu_out [7:0] $end
$var wire 1 9 alu_Z $end
$var wire 1 : alu_V $end
$var wire 1 ; alu_N $end
$var wire 1 < alu_C $end
$scope module ALU $end
$var wire 8 = B [7:0] $end
$var wire 4 > ALU_Sel [3:0] $end
$var wire 8 ? A [7:0] $end
$var reg 1 < C $end
$var reg 1 ; N $end
$var reg 8 @ Result [7:0] $end
$var reg 1 : V $end
$var reg 1 9 Z $end
$upscope $end
$scope module ControlUnit $end
$var wire 7 A opcode [6:0] $end
$var wire 4 B status_flags [3:0] $end
$var wire 1 C Z $end
$var wire 1 D V $end
$var wire 1 E N $end
$var wire 1 F C $end
$var reg 4 G ALU_Sel [3:0] $end
$var reg 1 6 D_W $end
$var reg 1 5 L_A $end
$var reg 1 4 L_B $end
$var reg 1 3 L_PC $end
$var reg 2 H S_A [1:0] $end
$var reg 2 I S_B [1:0] $end
$var reg 2 J S_D [1:0] $end
$upscope $end
$scope module DataMemory $end
$var wire 1 ! clk $end
$var wire 8 K data_in [7:0] $end
$var wire 1 # reset $end
$var wire 1 6 write_enable $end
$var wire 8 L address [7:0] $end
$var reg 8 M data_out [7:0] $end
$upscope $end
$scope module InstructionMemory $end
$var wire 15 N out [14:0] $end
$var wire 8 O address [7:0] $end
$upscope $end
$scope module MuxA $end
$var wire 8 P one [7:0] $end
$var wire 2 Q sel [1:0] $end
$var wire 8 R zero [7:0] $end
$var wire 8 S regB [7:0] $end
$var wire 8 T regA [7:0] $end
$var reg 8 U out [7:0] $end
$upscope $end
$scope module MuxB $end
$var wire 8 V datam [7:0] $end
$var wire 8 W lit [7:0] $end
$var wire 2 X sel [1:0] $end
$var wire 8 Y zero [7:0] $end
$var wire 8 Z regB [7:0] $end
$var reg 8 [ out [7:0] $end
$upscope $end
$scope module MuxData $end
$var wire 8 \ lit [7:0] $end
$var wire 1 ] sel $end
$var wire 8 ^ regB [7:0] $end
$var reg 8 _ out [7:0] $end
$upscope $end
$scope module ProgramCounter $end
$var wire 1 ! clk $end
$var wire 1 3 load $end
$var wire 8 ` new_addr [7:0] $end
$var wire 1 # reset $end
$var reg 8 a addr [7:0] $end
$upscope $end
$scope module Status $end
$var wire 1 ! clk $end
$var wire 4 b flags_in [3:0] $end
$var wire 1 # reset $end
$var reg 4 c flags_out [3:0] $end
$upscope $end
$scope module regA $end
$var wire 1 ! clk $end
$var wire 8 d data_in [7:0] $end
$var wire 1 5 load $end
$var wire 1 # reset $end
$var reg 8 e out [7:0] $end
$upscope $end
$scope module regB $end
$var wire 1 ! clk $end
$var wire 8 f data_in [7:0] $end
$var wire 1 4 load $end
$var wire 1 # reset $end
$var reg 8 g out [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 g
b0 f
b0 e
b0 d
b0 c
b1000 b
b0 a
b10000011 `
b10000011 _
b0 ^
0]
b10000011 \
b0 [
b0 Z
b0 Y
b0 X
b10000011 W
bx V
b0 U
b0 T
b0 S
b0 R
b0 Q
b1 P
b0 O
b110000011 N
bx M
b10000011 L
b0 K
b0 J
b0 I
b0 H
b0 G
0F
0E
0D
0C
b0 B
b1 A
b0 @
b0 ?
b0 >
b0 =
0<
0;
0:
19
b0 8
b0 7
06
05
04
03
b0 2
b0 1
b0 0
bx /
b110000011 .
b10000011 -
b0 ,
b0 +
b10000011 *
b1 )
b0 (
b0 '
b0 &
b0 %
b0 $
0#
b1 "
0!
$end
#5
b1000110 *
b1000110 L
b1000110 _
b1000110 -
b1000110 W
b1000110 \
b1000110 `
1C
b101000110 .
b101000110 N
b1 (
b1 O
b1 a
b1000 %
b1000 B
b1000 c
1!
#10
0!
#15
b10010000 *
b10010000 L
b10010000 _
b10010000 -
b10010000 W
b10010000 \
b10010000 `
b0 )
b0 A
b10010000 .
b10010000 N
b10 (
b10 O
b10 a
1!
#20
0!
#25
b1100000 *
b1100000 L
b1100000 _
b1100000 -
b1100000 W
b1100000 \
b1100000 `
b1100000 .
b1100000 N
b11 (
b11 O
b11 a
1!
#30
0!
#35
bx *
bx L
bx _
bx -
bx W
bx \
bx `
bx )
bx A
bx .
bx N
b100 (
b100 O
b100 a
1!
#40
0!
#45
b101 (
b101 O
b101 a
1!
#50
0!
#55
b110 (
b110 O
b110 a
1!
#60
0!
#65
b111 (
b111 O
b111 a
1!
#70
0!
#75
b1000 (
b1000 O
b1000 a
1!
#80
0!
#85
b1001 (
b1001 O
b1001 a
1!
#90
0!
#95
b1010 (
b1010 O
b1010 a
1!
#100
0!
#105
b1011 (
b1011 O
b1011 a
1!
#110
0!
#115
b1100 (
b1100 O
b1100 a
1!
#120
0!
#125
b1101 (
b1101 O
b1101 a
1!
#130
0!
#135
b1110 (
b1110 O
b1110 a
1!
#140
0!
#145
b1111 (
b1111 O
b1111 a
1!
#150
0!
#155
b10000 (
b10000 O
b10000 a
1!
#160
0!
#165
b10001 (
b10001 O
b10001 a
1!
#170
0!
#175
b10010 (
b10010 O
b10010 a
1!
#180
0!
#185
b10011 (
b10011 O
b10011 a
1!
#190
0!
#195
b10100 (
b10100 O
b10100 a
1!
#200
0!
